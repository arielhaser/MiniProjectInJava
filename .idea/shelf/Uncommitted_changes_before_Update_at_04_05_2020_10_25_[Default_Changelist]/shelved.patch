Index: src/primitives/Vector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package primitives;\r\n\r\nimport static primitives.Util.isZero;\r\n\r\n/**\r\n * Define vector object with direction and start point of (0,0,0)\r\n */\r\npublic class Vector {\r\n    private Point3D _head;\r\n\r\n    /**\r\n     * constructor of Vector\r\n     * @param _head = 3D point of head's vector\r\n     * @throws IllegalArgumentException = when vector is zero\r\n     */\r\n    public Vector(Point3D _head) throws IllegalArgumentException {\r\n        if (Point3D.ZERO.equals(_head))\r\n            throw new IllegalArgumentException(\"length vector is zero\");\r\n        this._head = _head;\r\n    }\r\n\r\n    /**\r\n     * copy constructor of Vector\r\n     * @param vec = vector object\r\n     */\r\n    public Vector(Vector vec)  {\r\n        this._head = vec._head;\r\n    }\r\n\r\n    /**\r\n     * constructor of Vector\r\n     * @param x = coordinate of x axis.\r\n     * @param y = coordinate of y axis.\r\n     * @param z = coordinate of z axis.\r\n     * @throws IllegalArgumentException = when vector is zero\r\n     */\r\n    public Vector(Coordinate x, Coordinate y, Coordinate z) throws IllegalArgumentException {\r\n        if (Point3D.ZERO.equals(new Point3D(x,y,z)))\r\n            throw new IllegalArgumentException(\"length vector is zero\");\r\n        this._head = new Point3D(x,y,z);\r\n    }\r\n\r\n    /**\r\n     * constructor of Vector\r\n     * @param x = coordinate of x axis.\r\n     * @param y = coordinate of y axis.\r\n     * @param z= = coordinate of z axis.\r\n     * @throws IllegalArgumentException = when vector is zero\r\n     */\r\n    public Vector(double x, double y, double z) throws IllegalArgumentException {\r\n        if (Point3D.ZERO.equals(new Point3D(x,y,z)))\r\n            throw new IllegalArgumentException(\"length vector is zero\");\r\n        this._head = new Point3D(x,y,z);\r\n    }\r\n\r\n    public Point3D get_head() {\r\n        return _head;\r\n    }\r\n\r\n    /**\r\n     * concrete vector to another vector\r\n     * @param other = vector object\r\n     * @return = new vector\r\n     */\r\n    public Vector add(Vector other){\r\n       double x= _head.get_x().get() + other.get_head().get_x().get();\r\n       double y= _head.get_y().get() + other.get_head().get_y().get();\r\n       double z= _head.get_z().get() + other.get_head().get_z().get();\r\n       return new Vector(x,y,z);\r\n    }\r\n\r\n    /**\r\n     * subtract vector with another vector\r\n     * @param other = vector object\r\n     * @return = new vector\r\n     */\r\n    public Vector subtract(Vector other){\r\n        double x= _head.get_x().get() - other.get_head().get_x().get();\r\n        double y= _head.get_y().get() - other.get_head().get_y().get();\r\n        double z= _head.get_z().get() - other.get_head().get_z().get();\r\n        return new Vector(x,y,z);\r\n    }\r\n\r\n    /**\r\n     * multiple vector with scale number\r\n     * @param mul = the scale number\r\n     * @return = new vector\r\n     */\r\n    public Vector scale(double mul){\r\n        double x= _head.get_x().get()*mul;\r\n        double y= _head.get_y().get()*mul;\r\n        double z= _head.get_z().get()*mul;\r\n        return new Vector(x,y,z);\r\n    }\r\n\r\n    /**\r\n     * execute dot product operation between two vectors\r\n     * @param other = vector object\r\n     * @return = new vector\r\n     */\r\n    public double dotProduct(Vector other){\r\n        double x = _head.get_x().get()*other.get_head().get_x().get();\r\n        double y = _head.get_y().get()*other.get_head().get_y().get();\r\n        double z = _head.get_z().get()*other.get_head().get_z().get();\r\n        return x+y+z;\r\n    }\r\n\r\n    /**\r\n     * execute cross product operation between two vectors\r\n     * @param other = vector object\r\n     * @return = new vector\r\n     */\r\n    public Vector crossProduct(Vector other){\r\n        double x = _head.get_x().get();\r\n        double x_other = other._head.get_x().get();\r\n        double y = _head.get_y().get();\r\n        double y_other = other._head.get_y().get();\r\n        double z = _head.get_z().get();\r\n        double z_other = other._head.get_z().get();\r\n        return new Vector(y*z_other-z*y_other, z*x_other-x*z_other, x*y_other-y*x_other);\r\n    }\r\n\r\n    /**\r\n     * give the length of vector with square\r\n     * @return = the size of the vector with square\r\n     */\r\n    public double lengthSquared(){\r\n        double x= _head.get_x().get();\r\n        double y= _head.get_y().get();\r\n        double z= _head.get_z().get();\r\n        return x*x+y*y+z*z;\r\n    }\r\n\r\n    /**\r\n     * give the length of vector\r\n     * @return = the size of the vector\r\n     */\r\n    public double length(){\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n\r\n    /**\r\n     * normalize the current vector by changing his 3D point\r\n     * @return the current vector with normalization\r\n     */\r\n    public Vector normalize(){\r\n        double len_vec = length();\r\n        _head.set_x(new Coordinate(_head.get_x().get()/len_vec));\r\n        _head.set_y(new Coordinate(_head.get_y().get()/len_vec));\r\n        _head.set_z(new Coordinate(_head.get_z().get()/len_vec));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * give new normalized vector by the current vector by changing his 3D point\r\n     * @return = new vector with normalization\r\n     */\r\n    public Vector normalized(){\r\n        return new Vector(_head).normalize();\r\n    }\r\n\r\n    public boolean isOppositeDirection(Vector other){\r\n        return _head.get_x().get() * other._head.get_x().get() <= 0 &&\r\n                _head.get_y().get() * other._head.get_y().get() <= 0 &&\r\n                _head.get_z().get() * other._head.get_z().get() <= 0;\r\n    }\r\n\r\n    public boolean isSameVector(Vector other){\r\n        boolean flag_x = false;\r\n        boolean flag_y = false;\r\n        boolean flag_z = false;\r\n        double scale_x, scale_y, scale_z;\r\n        if(isZero(_head.get_x().get()) || isZero(other.get_head().get_x().get())){\r\n            if (isZero(_head.get_x().get() - other.get_head().get_x().get()))\r\n                flag_x = true;\r\n            else\r\n                return false;\r\n        }\r\n        if(isZero(_head.get_y().get()) || isZero(other.get_head().get_y().get())){\r\n            if (isZero(_head.get_y().get() - other.get_head().get_y().get()))\r\n                flag_y = true;\r\n            else\r\n                return false;\r\n        }\r\n        if(isZero(_head.get_z().get()) || isZero(other.get_head().get_z().get())){\r\n            if (isZero(_head.get_z().get() - other.get_head().get_z().get()))\r\n                flag_z = true;\r\n            else\r\n                return false;\r\n        }\r\n        scale_x = _head.get_x().get()/other.get_head().get_x().get();\r\n        scale_y = _head.get_y().get()/other.get_head().get_y().get();\r\n        scale_z = _head.get_z().get()/other.get_head().get_z().get();\r\n        return (isZero(scale_x - scale_y) || flag_x || flag_y) &&\r\n                (isZero(scale_x - scale_z) || flag_x || flag_z) &&\r\n                (isZero(scale_y - scale_z) || flag_y || flag_z);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Vector vector = (Vector) o;\r\n        return _head.equals(vector._head);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Vector{\" +\r\n                \"_head=\" + _head +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/primitives/Vector.java	(revision d394ab3519f3da877e29acf518e27295eab446ad)
+++ src/primitives/Vector.java	(date 1587722807013)
@@ -159,12 +159,6 @@
         return new Vector(_head).normalize();
     }
 
-    public boolean isOppositeDirection(Vector other){
-        return _head.get_x().get() * other._head.get_x().get() <= 0 &&
-                _head.get_y().get() * other._head.get_y().get() <= 0 &&
-                _head.get_z().get() * other._head.get_z().get() <= 0;
-    }
-
     public boolean isSameVector(Vector other){
         boolean flag_x = false;
         boolean flag_y = false;
